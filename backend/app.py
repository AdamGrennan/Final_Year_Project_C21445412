from flask import Flask, request, jsonify
from flask_cors import CORS
from src.load_model import load_model
from src.predict import predict_bias
import openai
import os

app = Flask(__name__)
CORS(app)

openai.api_key = "sk--6J0lHtxcBaT3MAGsCdv45c8e-ApLvzWOsQGbSFMU0T3BlbkFJU_iEG2lxrrnZJOdpd3OahPhtj5ecFBavR_DH-kBVMA"

model, tokenizer, bias_labels = load_model()
BIAS_TYPES = ["OverconfidenceBias", "ConfirmationBias", "AnchoringBias", "Neutral"]


@app.route('/bert', methods=['POST'])
def bert_endpoint():
    data = request.json
    statement = data.get("input", "")
    if not statement:
        return jsonify({"ERROR": "No input provided"}), 400

    try:
        detected_biases = predict_bias(model, tokenizer, statement, bias_labels, threshold=0.6)
        return jsonify({"predictions": detected_biases})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/gpt', methods=['POST'])
def gpt_endpoint():
    data = request.json
    statement = data.get("input", "")
    if not statement:
        return jsonify({"ERROR": "No input provided"}), 400

    try:
        detected_biases = predict_bias(model, tokenizer, statement, bias_labels, threshold=0.6)
        print(f"Detected Biases (BERT): {detected_biases}")

        feedback = {}
        for bias in detected_biases:
            if bias in BIAS_TYPES and bias != "Neutral":
                messages = [
                    {
                        "role": "system",
                        "content": (
                            "You are a helpful assistant trained to provide constructive feedback "
                            "to users who may exhibit biases in their decision making. Provide clear and actionable insights."
                        )
                    },
                    {
                        "role": "user",
                        "content": (
                            f"The user has shown signs of {bias}. Their input was:\n"
                            f"\"{statement}\"\n"
                            "Provide:\n"
                            "An explanation of this bias.\n"
                            "Its potential impact on decision-making.\n"
                            "Suggestions for improving their judgment.\n"
                            "Any additional details they would like to provide or follow up on."
                        )
                    }
                ]

                print(f"GPT request messages: {messages}")
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=messages,
                    max_tokens=150,
                    temperature=1
                )
                print(f"GPT response: {response}")

                feedback[bias] = response.choices[0].message['content'].strip()

        if not feedback:
            return jsonify({"error": "No feedback generated by GPT"}), 500

        return jsonify({
            "bias_feedback": feedback
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    app.run(debug=True)
